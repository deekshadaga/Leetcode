class LRUCache {  
public:
    class node{
        public:
        int key;
        int val;
        node* next;
        node* prev;
        node(int _key, int _val){
            key = _key;
            val = _val;
        }
    };
    node* head = new node(-1,-1);
    node* tail = new node(-1,-1);
    int cap;
    unordered_map<int,node*> mp;

    LRUCache(int capacity) {
        cap = capacity;
        head->next = tail;
        tail->prev = head;
    }
    
    void addNode(node* newNode){
        node* temp = head->next;
        head->next = newNode;
        newNode->next = temp;
        newNode->prev = head;
        temp->prev = newNode;
    }

    void delNode(node* curr){
        node* currNext = curr->next;
        node* currPrev  = curr->prev;
        currPrev->next = currNext;
        currNext->prev = currPrev;
    }

    int get(int key) {
        if(mp.find(key) != mp.end()){
            node* res = mp[key];
            int resVal = res->val;
            delNode(res);
            addNode(res);
            mp[key] = head->next;
            return resVal;
        }
        return -1;
    }
    
    void put(int key, int value) {
        if(mp.find(key) != mp.end()){
            node* currNode = mp[key];
            mp.erase(key);
            delNode(currNode);
        }
        if(mp.size() == cap){
            mp.erase(tail->prev->key);
            delNode(tail->prev);
        }
        node* newNode = new node(key,value);
        addNode(newNode);
        mp[key] = head->next;
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
