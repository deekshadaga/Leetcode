/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    unordered_map<Node*, Node*> clone;
    Node* copyRandomList(Node* head) {
        if(!head) return NULL;
        if(clone.find(head) != clone.end()) return clone[head];
        Node* newCurr = new Node(head->val);
        clone[head] = newCurr;
        newCurr->random = copyRandomList(head->random);
        newCurr->next = copyRandomList(head->next);
        return clone[head];
    }
};

########################################################### Not Sure if this works or not #######################################################################################

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(!head) return head;
        Node* dummy = new Node(0);
        dummy->next = head;
        Node* curr = head,*front = dummy;
        while(curr){
            front = curr->next;
            Node* newNode = new Node(curr->val);
            curr->next=newNode;
            newNode->next = front;  
            curr = front;
        }
        curr = head;
        while(curr){
            front = curr->next->next;
            if(curr->next->random)
                curr->next->random = curr->random->next;
            curr=front;
        }
        curr=dummy;
        while(curr){
            front = curr->next->next;
            curr->next = curr->next->next;
            delete(curr->next);
        }
        return head;
    }
};
