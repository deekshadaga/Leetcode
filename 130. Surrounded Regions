class Solution {
public:
    void solve(vector<vector<char>>& board) {
        int r = board.size();
        int c = board[0].size(); 
        queue<pair<int,int>> q;
        vector<vector<int>> dir = {{1,0},{-1,0},{0,1},{0,-1}};
        //top border
        for(int i=0;i<c;i++){
            if(board[0][i]=='O'){
                q.push(make_pair(0,i));
                while(!q.empty()){
                    int x = q.front().first;
                    int y = q.front().second;
                    q.pop();
                    if(x<r && x>=0 && y>=0 && y<c && board[x][y]== 'O'){
                        board[x][y] = 'N';
                        for(int d =0;d<dir.size();d++){
                            q.push(make_pair(x+dir[d][0],y+dir[d][1]));
                        }
                    }
                }
            }
        }
        //bottom border
        for(int i=0;i<c;i++){
            if(board[r-1][i]=='O') {
                q.push(make_pair(r-1,i));
                while(!q.empty()){
                    int x = q.front().first;
                    int y = q.front().second;
                    q.pop();
                    if(x<r && x>=0 && y>=0 && y<c && board[x][y]== 'O'){
                        board[x][y] = 'N';
                        for(int d =0;d<dir.size();d++){
                            q.push(make_pair(x+dir[d][0],y+dir[d][1]));
                        }
                    }
                }
            }
        }
        //left border
        for(int i=0;i<r;i++){
            if(board[i][0]=='O'){
                q.push(make_pair(i,0));
                while(!q.empty()){
                    int x = q.front().first;
                    int y = q.front().second;
                    q.pop();
                    if(x<r && x>=0 && y>=0 && y<c && board[x][y]== 'O'){
                        board[x][y] = 'N';
                        for(int d =0;d<dir.size();d++){
                            q.push(make_pair(x+dir[d][0],y+dir[d][1]));
                        }
                    }
                }
            }
        }
        //right border
        for(int i=0;i<r;i++){
            if(board[i][c-1]=='O') {
                q.push(make_pair(i,c-1));
                while(!q.empty()){
                    int x = q.front().first;
                    int y = q.front().second;
                    q.pop();
                    if(x<r && x>=0 && y>=0 && y<c && board[x][y]== 'O'){
                        board[x][y] = 'N';
                        for(int d =0;d<dir.size();d++){
                            q.push(make_pair(x+dir[d][0],y+dir[d][1]));
                        }
                    }
                }
            }
        }
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(board[i][j]=='O') board[i][j]='X';
            }
        }
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(board[i][j]=='N') board[i][j]='O';
            }
        }
        return;
    }
};
